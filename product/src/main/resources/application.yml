spring:
  application:
    name: product-service
#  h2:
#    console:
#      enabled: true
#  #  SQL statements will be printed in the console.
#  jpa:
#    show-sql: true
#    #  Hibernate will drop and recreate the database schema on each application startup.
#    hibernate:
#      ddl-auto: create
#  # In memory means this will persist data until the application is running If the application starts,
#  #  then a database clears all the data
#  datasource:
#    url: jdbc:h2:mem:test


  #  This is the setup for postgres database
#  datasource:
#    # jdbc means a protocol using which can connect to a database
#    # postgresql means database name or database type
#    # //localhost:5432/product This is a database url, and here product is a database name
##    url: jdbc:postgresql://localhost:5432/product
##    username: eshopdb
##    password: aakash@1707
#
##    This is remote postgres sql database
#    url: jdbc:postgresql://ep-lingering-pine-aei4dwms-pooler.c-2.us-east-2.aws.neon.tech/product?sslmode=require&channel_binding=require
#    username: neondb_owner
#    password: npg_qCpoU0x4sALI
#
#  jpa:
#    database: POSTGRESQL
#    #  SQL statements will be printed in the console.
#    show-sql: true
#    #  Hibernate will drop and recreate the database schema on each application startup. This is used for schema management
#    hibernate:
#      ddl-auto: update
#    # Whenever spring-boot interacts with a database, it creates a query
#    database-platform: org.hibernate.dialect.PostgreSQLDialect


#  # This is how we set up for local MySQL Database,
#  #  This is the setup for MySQL Database
#  datasource:
#    # jdbc means a protocol using which can connect to a database
#    # postgresql means database name or database type
#    # //localhost:5432/order This is a database url, and here order is a database name
#    url: jdbc:mysql://localhost:3306/product
#    username: root
#    password: aakash@17072003
#
#  jpa:
#    #  SQL statements will be printed in the console.
#    show-sql: true
#    #  Hibernate will drop and recreate the database schema on each application startup. This is used for schema management
#    hibernate:
#      ddl-auto: update
#    # Whenever spring-boot interacts with a database, it creates a query
#    database-platform: org.hibernate.dialect.MySQLDialect
#    properties:
#      hibernate:
#        format_sql: true


  # This is how we set up for remote MySQL Database where i use phpmyadmin for gui ,
  #  This is the setup for MySQL Database
  datasource:
    # jdbc means a protocol using which can connect to a database
    # postgresql means database name or database type
    # //localhost:5432/order This is a database url, and here order is a database name
    url: jdbc:mysql://localhost:3307/product
    username: aakash
    password: aakash

  jpa:
    #  SQL statements will be printed in the console.
    show-sql: true
    #  Hibernate will drop and recreate the database schema on each application startup. This is used for schema management
    hibernate:
      ddl-auto: update
    # Whenever spring-boot interacts with a database, it creates a query
    database-platform: org.hibernate.dialect.MySQLDialect
    properties:
      hibernate:
        format_sql: true

server:
  port: 8081